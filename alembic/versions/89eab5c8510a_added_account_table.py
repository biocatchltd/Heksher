""""Added account table"

Revision ID: 89eab5c8510a
Revises: 2d75117ba1f8
Create Date: 2021-10-06 18:04:20.337921

"""
import orjson
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision = '89eab5c8510a'
down_revision = '2d75117ba1f8'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    setting_metadata = op.create_table('setting_metadata',
    sa.Column('setting', sa.String(), nullable=True),
    sa.Column('key', sa.String(), nullable=False),
    sa.Column('value', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.ForeignKeyConstraint(['setting'], ['settings.name'], ondelete='CASCADE'),
    sa.UniqueConstraint('setting', 'key')
    )
    op.create_index(op.f('ix_setting_metadata_setting'), 'setting_metadata', ['setting'], unique=False)
    rule_metadata = op.create_table('rule_metadata',
    sa.Column('rule', sa.Integer(), nullable=True),
    sa.Column('key', sa.String(), nullable=False),
    sa.Column('value', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.ForeignKeyConstraint(['rule'], ['rules.id'], ondelete='CASCADE'),
    sa.UniqueConstraint('rule', 'key')
    )
    op.create_index(op.f('ix_rule_metadata_rule'), 'rule_metadata', ['rule'], unique=False)

    # get all metadata
    settings = sa.table('settings',
                        sa.column('name', sa.String),
                        sa.column('metadata', sa.String)
                        )
    rules = sa.table('rules',
                        sa.column('id', sa.Integer),
                        sa.column('metadata', sa.String)
                        )
    connection = op.get_bind()
    existing_setting_metadata = connection.execute(
        sa.select(settings.c.name, settings.c.metadata)
    )
    op.bulk_insert(
        setting_metadata,
        [{'setting': name, 'key': k, 'value': v}
         for (name, md_str) in existing_setting_metadata
         for (k, v) in orjson.loads(md_str).items()]
    )
    existing_rule_metadata = connection.execute(
        sa.select(rules.c.id, rules.c.metadata)
    )
    op.bulk_insert(
        rule_metadata,
        [{'rule': rule_id, 'key': k, 'value': v}
         for (rule_id, md_str) in existing_rule_metadata
         for (k, v) in orjson.loads(md_str).items()]
        
    )

    op.drop_column('rules', 'metadata')
    op.drop_column('settings', 'metadata')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('settings', sa.Column('metadata', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('rules', sa.Column('metadata', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.drop_index(op.f('ix_rule_metadata_rule'), table_name='rule_metadata')
    op.drop_table('rule_metadata')
    op.drop_index(op.f('ix_setting_metadata_setting'), table_name='setting_metadata')
    op.drop_table('setting_metadata')
    # ### end Alembic commands ###
